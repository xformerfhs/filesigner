// SPDX-FileCopyrightText: Copyright 2024 Frank Schwab
//
// SPDX-License-Identifier: Apache-2.0
//
// SPDX-FileType: SOURCE
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
//
// You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Author: Frank Schwab
//
// Version: 1.0.0
//
// Change history:
//	   2024-03-03: V1.0.0: Created.
//

package stretcher

import (
	"crypto/hmac"
	"filesigner/numberhelper"
	"filesigner/slicehelper"
	"golang.org/x/crypto/sha3"
)

// keyPad contains the padding byte for the hash of the bytes.
// They have been generated by RDRAND instruction results xored
// with bytes from the BCryptGenRandom Windows API call on a PC.
var keyPad = []byte{
	0x6f, 0x00, 0x11, 0x21, 0x3d, 0x31, 0xc2, 0x3b,
	0xc3, 0x69, 0xab, 0x0b, 0x6d, 0x8e, 0x42, 0x35,
	0x30, 0x2d, 0x15, 0xd7, 0x37, 0xd5, 0xb1, 0xdf,
	0x45, 0xee, 0x30, 0xbc, 0xe0, 0x0b, 0x89, 0xcc,
}

// ******** Public functions ********

// KeyFromBytes calculates a key from the supplied bytes.
func KeyFromBytes(a []byte) []byte {
	padding, aWithLen := paddingFromBytes(a)

	padSplitIndex := len(padding) >> 1

	return slicehelper.Concat(padding[:padSplitIndex],
		aWithLen,
		padding[padSplitIndex:])
}

// ******** Private functions ********

// paddingFromBytes generates padding bytes and the original bytes with the length appended
// from a byte array.
func paddingFromBytes(a []byte) ([]byte, []byte) {
	aWithLen := slicehelper.Concat(a, numberhelper.StaticIntAsShortestBigEndianBytes(len(a)))

	mac := hmac.New(sha3.New512, hashKeyFromBytes(aWithLen))
	mac.Write(a)

	return mac.Sum(nil), aWithLen
}

// hashKeyFromBytes generates the hash key from the supplied bytes.
func hashKeyFromBytes(a []byte) []byte {
	hasher := sha3.New256()
	hasher.Write(slicehelper.NewReverse(a))
	padSplitIndex := len(keyPad) >> 1
	return slicehelper.Concat(keyPad[:padSplitIndex], hasher.Sum(nil), keyPad[padSplitIndex:])
}
